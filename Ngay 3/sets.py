# SETS trong Python

#set l√† m·ªôt taajp h·ª£p duy nh·∫•t, kh√¥ng th·ª© t·ª±
# n√≥ gi√∫p lo·∫°i b·ªè gi·ªØ li·ªáu tr√πng lap , ki·ªÉm tra ph·∫ßn t·ª≠ nhanh,

my_set = {'item1', 'item2', 'item3'} # Set s·∫Ω ƒë∆∞·ª£c th·ªÉ hi·ªán qua {}
print(len(my_set))

# Ki·ªÉm tra 1 m·ª•c
print("Item 4 c√≥ ·ªü trong my_set kh√¥ng??", 'item4' in my_set)

# Th√™m m·ª•c d√πng add() ƒë·ªëi v·ªõi set
my_set.add('item4')
print(my_set)

# Th√™m nhi·ªÅu m·ª•c b·∫±ng update
my_set.update(['item5', 'item6'])
print(my_set)

my_set.update(('item7', 'item8'))
print(my_set)

them = ('item9', 'item10', 'item11')
my_set.update(them)
print(my_set)

# x√≥a c√°c m·ª•c kh·ªèi t·∫≠p h·ª£p d√πng remove()
#x√≥a b·∫±ng remove()
my_set.remove('item11')
print(my_set)
# x√≥a b·∫±ng pop() , x√≥a b·∫±ng pop() set s·∫Ω x√≥a ng·∫´u nhi√™n 1 ph·∫ßn t·ª≠ v c√≥ th·ªÉ xem ƒëc ph·∫ßn t·ª≠ ƒë√£ x√≥a
my_set.pop()
remove_item = my_set.pop()
print(remove_item)

# x√≥a t·∫•t c·∫£ ph·∫ßn t·ª≠ th√¨ d√πng clear
my_set.clear()
print(my_set)

# x√≥a lu√¥n t·∫≠p h·ª£p th√¨ d√πng del
# del my_set
# print(my_set)

# chuy·ªÉn ƒë·ªïi danh s√°ch th√†nh t·∫≠p h·ª£p
lists = ['item1', 'item2', 'item3']
my_set = set(lists)
print(my_set)

# Khi d√πng union th√¨ s·∫Ω tr·∫£ v·ªÅ 1 set m·ªõi
set1 = {'item1', 'item2', 'item3'}
set2 = {'item4', 'item5', 'item6'}
full_set = set1.union(set2)
print(full_set)

fruits = {'banana', 'orange', 'mango', 'lemon'}
vegetables = {'tomato', 'potato', 'cabbage','onion', 'carrot'}
print(fruits.union(vegetables))

# d√πng update s·∫Ω ch√®n vfo 1 t·∫≠p h·ª£p nh·∫•t ƒë·ªãnh, n√≥ t·ª± lo·∫°i b·ªè nh·ªØng ph·∫ßn t·ª≠ trungf l·∫∑p
fruits.update(vegetables)
print(fruits)

# GIAO ƒêI·ªÇM INTERSECTION
# giao ƒëi·ªÉm l√† c√°c ph·∫ßn t·ª≠ s·∫Ω c√≥ m·∫∑t ·ªü trong c√°c set

sets1 = {'item1', 'item2', 'item3'}
sets2 = {'item4', 'item5', 'item6', 'item3'}
set_intersection = sets1.intersection(sets2)
print(set_intersection)

# T·∫≠p con v√† t·∫≠p si√™u
# T·∫≠p con (issubset): set A l√† t·∫≠p con c·ªßa set B n·∫øu m·ªçi ph·∫ßn t·ª≠ c·ªßa A ƒë·ªÅu c√≥ trong B
# T·∫≠p si√™u (issuperset): set A l√† t·∫≠p si√™u c·ªßa set B n·∫øu m·ªçi ph·∫ßn t·ª≠ c·ªßa B ƒë·ªÅu c√≥ trong A

set_a = {'item1', 'item2', 'item3', 'item4'}
set_b = {'item4', 'item5', 'item6', 'item3', 'item1', 'item2', 'item7'}
print("Set a l√† t·∫≠p con c·ªßa set b:", set_a.issubset(set_b))
print("Set b l√† t·∫≠p con c·ªßa set a?", set_b.issubset(set_a))

set_c = {'item1', 'item2', 'item3', 'item4', 'item5', 'item6'}
set_d = {'item1', 'item2', 'item3', 'item4'}
print("Set d l√† t·∫≠p con c·ªßa set c?", set_d.issubset(set_c))
print("Set c l√† t·∫≠p si√™u c·ªßa set d?", set_c.issuperset(set_d))


# S·ª± kh√°c bi·ªát gi·ªØa 2 t·∫≠p h·ª£p
su_khac_biet1 = {'item1', 'item2', 'item3', 'item4'}
su_khac_biet2 = {'item4', 'item5', 'item6'}
print(su_khac_biet1.difference(su_khac_biet2))
print(su_khac_biet2.difference(su_khac_biet1))

# T√¨m hi·ªáu s·ªë ƒë·ªëi x·ª©ng gi·ªØa 2 t·∫≠p h·ª£p d√πng symmetric_difference
print(su_khac_biet1.symmetric_difference(su_khac_biet2))
print(su_khac_biet2.symmetric_difference(su_khac_biet1))

# Tham gia c√°c t·∫≠p h·ª£p d√πng isdisjoint ƒë·ªÉ ki·ªÉm tra 2 t·∫≠p h·ª£p c√≥ b·ªã ch·∫°m ƒëi·ªÉm kh√¥ng True False
even_number = {1, 2, 3, 4, 5, 6}
old_number = {7, 8, 9, 10, 11, 12}
print(even_number.isdisjoint(old_number))

# Bai tap
it_companies = {'Facebook', 'Google', 'Microsoft',
                'Apple', 'IBM', 'Oracle', 'Amazon'}
A = {19, 22, 24, 20, 25, 26}
B = {19, 22, 20, 25, 26, 24, 28, 27}
age = [22, 19, 24, 25, 26, 24, 25, 24]

print("ƒê·ªô d√†i c·ªßa it_companies l√†: ", len(it_companies))
it_companies.add('Twiter')
print(it_companies)
it_companies.update(['Dell', 'Hp', 'Asus'])
print(it_companies)
it_companies.remove('Twiter')
print(it_companies)
it_companies.discard('Test')
print(it_companies)

print("S·ª± kh√°c bi·ªát gi·ªØa remove v√† discard:\nremove khi x√≥a"
      " ph·∫ßn t·ª≠ kh√¥ng c√≥ trong set s·∫Ω b√°o l·ªói\nC√≤n discard x√≥a"
      " ph·∫ßn t·ª≠ ngo√†i set s·∫Ω ko b√°o l·ªói m√† t·ª± ƒë·ªông b·ªè qua ")

# B√†i t·∫≠p 2
C = A.union(B)
print("T·∫≠p m·ªõi C l√†:", C)
giao_diem = A.intersection(B)
print("Giao ƒëi·ªÉm gi·ªØa A v√† B l√†:", giao_diem)
print("A l√† t·∫≠p con c·ªßa B? ƒê√∫ng hay sai?", A.issubset(B))
print("A v√† B c√≥ r·ªùi nhau kh√¥ng??", A.isdisjoint(B))

del A
del B

# B√†i t·∫≠p 3
age_set = set(age)
print(age_set)
print("ƒê·ªô d√†i c·ªßa danh s√°ch l√†: ", len(age))
print("ƒê·ªô d√†i c·ªßa t·∫≠p h·ª£p l√†: ", len(age_set))

# 2. Gi·∫£i th√≠ch s·ª± kh√°c bi·ªát gi·ªØa c√°c ki·ªÉu d·ªØ li·ªáu sau:
# Chu·ªói (string), Danh s√°ch (list), B·ªô (tuple) v√† T·∫≠p h·ª£p (set)

# üîπ Chu·ªói (string)
# - L√† d√£y k√Ω t·ª± n·∫±m trong d·∫•u nh√°y ƒë∆°n ho·∫∑c nh√°y k√©p.
# - C√≥ th·ªÉ ch·ª©a ch·ªØ, s·ªë, k√Ω t·ª± ƒë·∫∑c bi·ªát.
# - Kh√¥ng th·ªÉ thay ƒë·ªïi (immutable).
# - C√≥ th·ªÉ truy c·∫≠p t·ª´ng ph·∫ßn t·ª≠ b·∫±ng ch·ªâ s·ªë.
text = "Python"
print(text[0])   # P

# üîπ Danh s√°ch (list)
# - L√† t·∫≠p h·ª£p c√≥ th·ª© t·ª± (ordered) c·ªßa nhi·ªÅu ph·∫ßn t·ª≠.
# - C√≥ th·ªÉ ch·ª©a nhi·ªÅu ki·ªÉu d·ªØ li·ªáu kh√°c nhau.
# - C√≥ th·ªÉ thay ƒë·ªïi (mutable): th√™m, x√≥a, s·ª≠a ph·∫ßn t·ª≠.
numbers = [1, 2, 3, 4]
numbers.append(5)
print(numbers)   # [1, 2, 3, 4, 5]

# üîπ B·ªô (tuple)
# - Gi·ªëng list nh∆∞ng kh√¥ng th·ªÉ thay ƒë·ªïi (immutable).
# - C√≥ th·ª© t·ª± (ordered).
# - D√πng khi d·ªØ li·ªáu c·ªë ƒë·ªãnh, kh√¥ng mu·ªën thay ƒë·ªïi.
coordinates = (10, 20)
# coordinates[0] = 15  ‚ùå l·ªói v√¨ tuple kh√¥ng th·ªÉ thay ƒë·ªïi

# üîπ T·∫≠p h·ª£p (set)
# - L√† t·∫≠p h·ª£p **kh√¥ng c√≥ th·ª© t·ª±** (unordered) v√† **kh√¥ng c√≥ ph·∫ßn t·ª≠ tr√πng l·∫∑p**.
# - Kh√¥ng th·ªÉ truy c·∫≠p b·∫±ng ch·ªâ s·ªë.
# - D√πng cho c√°c ph√©p to√°n t·∫≠p h·ª£p (union, intersection, difference...).
fruits = {"apple", "banana", "apple", "orange"}
print(fruits)  # {'banana', 'apple', 'orange'} (ph·∫ßn t·ª≠ tr√πng b·ªã lo·∫°i b·ªè)

